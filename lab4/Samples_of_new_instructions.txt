# Sample execution blocks including new instructions

# To test an instruction, assemble the code block and place it in imem module. 
# All blocks start at address 0x0

# bcon
addi $a0, $zero, 2             
addi $a1, $zero, 10
addi $a2, $zero, 4
sub $a1, $a1, $a0
bcon $a2, $a1, -2       # taken when $a1 = $a2 + 4
add $a2, $a2, $a1       # $a2 = 4 + 6 = 10

# bncon
addi $a0, $zero, 1             
addi $a1, $zero, 10
addi $a2, $zero, 4
sub $a1, $a1, $a0
bcon $a2, $a1, -2       # taken when $a1 != $a2 + 4
add $a2, $a2, $a1       # $a2 = 4 + 8 = 12

# jaladd
addi $a0, $zero, 0x08
addi $a1, $zero, 0x08
jaladd $a0, $a1         # Jumps to address 0x10
addi $a2, $zero, 3      # Not executed
addi $a3, $zero, 6      # Jumped to here
jr $ra			# Now the execution continues from $a2 addition

# jalsub
addi $a0, $zero, 0x18
addi $a1, $zero, 0x08
jalsub $a0, $a1         # Jumps to address 0x10
addi $a2, $zero, 3      # Not executed
addi $a3, $zero, 6      # Jumped to here
jr $ra			# Now the execution continues from $a2 addition

# addui
addi $a0, $zero, 7
addi $a1, $zero, 1
addui $a1, $a0, $a1 	# Makes $a1=0x00080000. Equivalent to lui $a1, 0x06
addui $a1, $a1, $zero	# Makes $a1=0x00000000. Equivalent to lui $a1, 0x00
                        # Here $a1 become zero because addui uses only the lower part of the register for addition

# jri
addi $a0, $zero, 0x20
sw $a0, 0x50($zero)     # Stores 0x20 to address 0x50
jri -16($a0)            # Jumps to address 0x10
sw $zero, 0x00($zero)   # Not executed
lw $a1, 0x50($zero)     # Jumped to here. $a1 = 0x20

# neg
addi $a0, $zero, 7
addi $a1, $a0, -3        # $a1 = 7 - 3 = 4
neg $a1, $a1             # $a1 = -4
add $a1, $a0, $a1        # $a1 = 7 + (-4) = 3

