// Written by David_Harris@hmc.edu

// Top level system including MIPS and memories


module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] readdata, 
	     output  logic[31:0] instr,          
	     output  logic       memwrite,
	     // srca, srcb, result and pc is outputted
	     output  logic[31:0] srca,
	     output  logic[31:0] srcb,
	     output logic[31:0] result,
	     output logic[31:0] pc);    

 
   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata, srca, srcb, result);  
   imem imem (pc[7:0], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule



// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule



// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output


module imem ( input logic [7:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case (addr)		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h08000011;
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'hac020054;
		//8'h48: instr = 32'h08000012;	// j 48, so it will loop here
		
		// addi $a1, $zero, 0x04 -> so do not loop at the end 
		// NOTE : for sra can be editted to 32'h20050008
		8'h48: instr = 32'h20050004; 
		
		// JALSUB
		//8'h4c: instr = 32'h20040060; // addi $a0, $zero, 0x60
        //8'h50: instr = 32'h20050004; // addi $a1, $zero, 0x04
        
        //============================//
        //8'h54: instr = 32'h00850001;  // jalsub $a0, $a1
        //============================//
        
        //8'h58: instr = 32'h20070001; // addi $a3, $zero, 1  => THIS INSTRUCTION WILL NOT BE EXECUTED
        //8'h5c: instr = 32'h20070002; // addi $a3, $zero, 2
        //8'h60: instr = 32'h23e70000; // addi $a3, $ra, 0
        
        
        // SRA
        
        //============================//
        8'h4c: instr = 32'h00052082; // sra $a0, $a1(0x04), 2 => result ($a0) will be 1 (4/4)
		//============================//
		
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// single-cycle MIPS processor, with controller and datapath

module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata,
             output logic[31:0] srca, 
             output logic[31:0] srcb,
             output logic[31:0] result);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, jldd, sft;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, jldd, sft, alucontrol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, jldd, sft,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata, srca, srcb, result);

endmodule
module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump, jldd, sft, 
                  output logic[2:0] alucontrol);

   logic [1:0] aluop;
   logic       branch;

   maindec md (op, funct, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, jldd, sft, aluop);

   aludec  ad (funct, aluop, alucontrol);

   assign pcsrc = branch & zero;

endmodule

module maindec (input logic[5:0] op, funct, // new
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump, jldd, sft, // new
	              output logic[1:0] aluop );
   logic [10:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg, aluop, jump, jldd, sft} = controls; // new

  always_comb
    case(op)
      6'b000000:
                case(funct)
                      6'b000001: controls <= 11'b11000001010; // jalsub funct field -> 1 , aluop -> 01 : sub
                      6'b000010: controls <= 11'b11000010001; // sra funct field -> 2 , alu : dont care
                      default: controls <= 11'b11000010000; // R-type 
                endcase
      6'b100011: controls <= 11'b10100100000; // LW
      6'b101011: controls <= 11'b00101000000; // SW
      6'b000100: controls <= 11'b00010001000; // BEQ
      6'b001000: controls <= 11'b10100000000; // ADDI
      6'b000010: controls <= 11'b00000000100; // J
      default:   controls <= 11'bxxxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, jldd, sft, 
		 input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 output logic[31:0] pc, 
	         input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	         input  logic[31:0] readdata,
	         // srca, srcb, and result are outputted 
	         output logic[31:0] srca,
	         output logic[31:0] srcb,
	         output logic[31:0] result); 

  logic [4:0]  writereg;
  logic [4:0]  jlddreg; // new
  logic [31:0] pcnexttemp; // new
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
  logic [31:0] signimm, signimmsh; // srca and result is deleted
  logic [31:0] nonpcresult;// new
  logic [31:0] pcresult;// new
  logic [31:0] shiftresult;// new
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnexttemp);
                    
  //----------------------------------------------------//
  mux2 #(32)   diffmux (pcnexttemp, aluout, jldd, pcnext);  // new
  //----------------------------------------------------//  
  
  

// register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg,
                   result, srca, writedata);

   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, jlddreg);

   //----------------------------------------------------//
   mux2 #(5)    mux31 (jlddreg, 5'b11111, jldd, writereg); // new
   //----------------------------------------------------//
   
   
   mux2 #(32)  resmux (aluout, readdata, memtoreg, nonpcresult);
   
   //----------------------------------------------------//
   mux2 #(32)   pcmux2 (nonpcresult, pcplus4, jldd, pcresult); // new
   //----------------------------------------------------//
   
   //----------------------------------------------------//
   shifter      brlshifter (writedata, instr[10:6], shiftresult);
   mux2 #(32)   shiftmux (pcresult, shiftresult, sft, result); // new
   //----------------------------------------------------//
   
   signext         se (instr[15:0], signimm);

  // ALU logic
   mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);

endmodule


module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff@(posedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule


module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
           
            
             
              always @( * ) begin
              
                  zero = (result == 32'h00000000);
              
              end
              
              
              always_comb           
              
                  case (alucont)
                  
                      3'b000: result = a & b; 
                      3'b001: result = a | b; 
                      3'b010: result = a + b; 
                      3'b110: result = a - b; 
                      3'b111: result = a < b; 
                      default: result = 32'hxxxxxxxx; 
                      
              endcase
              
              

endmodule


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

// new barrel shifter
module shifter(input logic [31:0] rt,
               input logic [4:0] shamt,
               output logic [31:0] out
);

    always_comb
        begin
            case (shamt)
                5'b00000: out = rt;
                5'b00001: out = {rt[0], rt[31:1]};
                5'b00010: out = {rt[1:0], rt[31:2]};
                5'b00011: out = {rt[2:0], rt[31:3]};
                5'b00100: out = {rt[3:0], rt[31:4]};
                5'b00101: out = {rt[4:0], rt[31:5]};
                5'b00110: out = {rt[5:0], rt[31:6]};
                5'b00110: out = {rt[6:0], rt[31:7]};
                5'b00110: out = {rt[7:0], rt[31:8]};
                5'b00110: out = {rt[8:0], rt[31:9]};
                5'b00110: out = {rt[9:0], rt[31:10]};
                5'b00110: out = {rt[10:0], rt[31:11]};
                5'b00110: out = {rt[11:0], rt[31:12]};
                5'b00110: out = {rt[12:0], rt[31:13]};
                5'b00110: out = {rt[13:0], rt[31:14]};
                5'b00110: out = {rt[14:0], rt[31:15]};
                5'b00110: out = {rt[15:0], rt[31:16]};
                5'b00110: out = {rt[16:0], rt[31:17]};
                5'b00110: out = {rt[17:0], rt[31:18]};
                5'b00110: out = {rt[18:0], rt[31:19]};
                5'b00110: out = {rt[19:0], rt[31:20]};
                5'b00110: out = {rt[20:0], rt[31:21]};
                5'b00110: out = {rt[21:0], rt[31:22]};
                5'b00110: out = {rt[22:0], rt[31:23]};
                5'b00110: out = {rt[23:0], rt[31:24]};
                5'b00110: out = {rt[24:0], rt[31:25]};
                5'b00110: out = {rt[25:0], rt[31:26]};
                5'b00110: out = {rt[26:0], rt[31:27]};
                5'b00110: out = {rt[27:0], rt[31:28]};
                5'b00110: out = {rt[28:0], rt[31:29]};
                5'b00110: out = {rt[29:0], rt[31:30]};
            default  out = {rt[30:0], rt[31]};
        endcase
    end

endmodule 










`timescale 1ns / 1ps

module disp_unit(input clk, input [31:0] writeData, input [31:0] dataAddress,
output [6:0] activate_catode, output [3:0] activate_anode);


reg [3:0] num = 4'b0000;
reg [3:0] anode = 4'b0111;
reg [6:0] catode = 7'b0000001;
reg [19:0] cnt_1;
wire [1:0] cnt_2;



always @(posedge clk)
    begin
        cnt_1 <= cnt_1 + 1;
    end
 
 // anode
 always @(*)
  begin
    case(cnt_2)
        2'b00:
        begin
            anode = 4'b0111;
            num = writeData[7:4];
        end
        2'b01:
        begin
            anode = 4'b1011;
            num = writeData[3:0];;
        end
        2'b10:
        begin
            anode = 4'b1101;
            num = dataAddress[7:4];
        end
        2'b11:
        begin
            anode = 4'b1110;
            num = dataAddress[3:0];
        end
    endcase
  end
  
  
 always @(*)
    begin
        case(num)
        4'b0000:
            begin
                catode = 7'b0000001;
            end
        4'b0001:
            begin
                catode = 7'b1001111;
            end
        4'b0010:
            begin
                catode = 7'b0010010;
            end
        4'b0011:
            begin
                catode = 7'b0000110;
            end
        4'b0100:
            begin
                catode = 7'b1001100;
            end
        4'b0101:
            begin
                catode = 7'b0100100;
            end
        4'b0110:
            begin
                catode = 7'b0100000;
            end
        4'b0111:
            begin
                catode = 7'b0001111;
            end
        4'b1000:
            begin
                catode = 7'b0000000;
            end
        4'b1001:
            begin
                catode = 7'b0000100;
            end
        4'b1010:
            begin
                catode = 7'b0000010;
            end
        4'b1011:
            begin
                catode = 7'b1100000;
            end
        4'b1100:
            begin
                catode = 7'b0110001;
            end
        4'b1101:
            begin
                catode = 7'b1000010;
            end
        4'b1110:
            begin
                catode = 7'b0110000;
            end
        4'b1111:
            begin
                catode = 7'b0111000;
            end
        endcase
    end 
    
       assign cnt_2 = cnt_1[19:18];
       assign activate_anode = anode;
       assign activate_catode = catode;

endmodule













module pulse_controller(
	input CLK, sw_input, clear,
	output reg clk_pulse );

	 reg [2:0] state, nextstate;
	 reg [27:0] CNT; 
	 wire cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule













`timescale 1ns / 1ps


module lab_4(input clk, input clk_input, input reset_input, input clear, output [6:0] activate_catode, output [3:0] activate_anode);

wire clk_pulse, reset_pulse, writedata, dataadr, readdata, instr, memwrite, srca, srcb, result, pc;
top topModule(clk_pulse, reset_pulse, writedata, dataadr, readdata, instr, memwrite, srca, srcb, result, pc);

disp_unit disp_unit1(clk, writedata, dataadr, activate_catode, activate_anode);

pulse_controller clock_pulse_button(clk, clk_input, clear, clk_pulse);

pulse_controller reset_pulse_button(clk, reset_input, clear, reset_pulse);

endmodule
